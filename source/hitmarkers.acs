/*-----------------------\
   Hitmarkers by Tekish
\-----------------------*/

#library "hitmarkers"
#include "zcommon.acs"

#define HM_ANIM_DEFAULT		9
#define HM_ANIM_IMPACT		15
#define HM_BASECOLOR		CR_UNTRANSLATED
#define HM_BRIDGE			"hitmarkersbridge"
#define HM_FLAGS			HUDMSG_FADEOUT | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP
#define HM_ID				160400
#define HM_REFRESH			1
#define HM_SOUNDLIMIT		4
#define HM_TICRATE			35
#define HM_TIME				(HM_REFRESH << 16) / HM_TICRATE + 1

bool killswitch;
int animhitspeed, animhitstyle, animkillspeed, animkillstyle, consoleplayer, hitmarkertype, sounddelay;
int animhitstate = -1, animkillstate = -1;
str animdefault[HM_ANIM_DEFAULT] = { "A", "B", "C", "D", "E", "F", "G", "H", "I" };
str animimpact[HM_ANIM_IMPACT] = { "A", "B", "C", "D", "E", "E", "E", "E", "E", "E", "E", "F", "G", "H", "I" };

/*------------\
   Functions
\------------*/

function void animationhandler(void)
{
	int animhitmaximum, animkillmaximum;

	if (animhitstate >= 0)
	{
		if (styletype(animhitstyle, 2))
			animhitmaximum = HM_ANIM_DEFAULT;
		else if (styletype(animhitstyle, 3))
			animhitmaximum = HM_ANIM_IMPACT;

		if (animhitstate < animhitmaximum - HM_REFRESH * animhitspeed)
		{
			animhitstate = animhitstate + HM_REFRESH * animhitspeed;
			renderhit(hitmarkertype, true);
		}
		else
		{
			animhitstate = -1;
		}
	}

	if (animkillstate >= 0)
	{
		if (styletype(animkillstyle, 2))
			animkillmaximum = HM_ANIM_DEFAULT;
		else if (styletype(animkillstyle, 3))
			animkillmaximum = HM_ANIM_IMPACT;

		if (animkillstate < animkillmaximum - HM_REFRESH * animkillspeed)
		{
			animkillstate = animkillstate + HM_REFRESH * animkillspeed;
			renderhit(-1, true);
		}
		else
		{
			animkillstate = -1;
		}
	}
}

function void decrementdelay(void)
{
	if (sounddelay)
		sounddelay = sounddelay - HM_REFRESH;
}

function int getcolor(int color)
{
	switch (color)
	{
		case 1: // Blue
			color = CR_LIGHTBLUE;
			break;

		case 2: // Brown
			color = CR_DARKBROWN; 
			break;

		case 3:
			color = CR_CREAM;
			break;	

		case 4:
			color = CR_CYAN;
			break;

		case 5: // Dark Gray
			color = CR_BLACK;
			break;

		case 6:
			color = CR_DARKGREEN;
			break;

		case 7:
			color = CR_DARKRED;
			break;

		case 8: // Gray
			color = CR_DARKGRAY;
			break;

		case 9:
			color = CR_GREEN;
			break;

		case 10:
			color = CR_OLIVE;
			break;

		case 11:
			color = CR_ORANGE;
			break;

		case 12: // Pink
			color = CR_BRICK;
			break;

		case 13:
			color = CR_PURPLE;
			break;

		case 14:
			color = CR_RED;
			break;

		case 15:
			color = CR_SAPPHIRE;
			break;

		case 16:
			color = CR_TEAL;
			break;

		case 17:
			color = CR_WHITE;
			break;

		case 18:
			color = CR_YELLOW;
	}

	return color;
}

function int getcvarplayer(str cvar)
{
	return getusercvar(consoleplayer, cvar);
}

function str hitdamage(str sound)
{
	if (getcvarplayer("hm_hitdamage"))
	{
		int damage = getcvarplayer("hm_bridge_damage");
		int hitdamagehigh = getcvarplayer("hm_hitdamagehigh");
		int hitdamagemedium = getcvarplayer("hm_hitdamagemedium");
		str type = "";

		if (hitdamagehigh < 1 || hitdamagehigh > 1000)
			hitdamagehigh = 75;

		if (hitdamagemedium < 1 || hitdamagemedium > 1000)
			hitdamagemedium = 25;

		if (damage >= hitdamagehigh)
			type = "high";
		else if (damage >= hitdamagemedium)
			type = "medium";

		sound = strparam(s:sound, s:type);
	}

	return sound;
}

function void renderhit(int hitmarker, bool force)
{
	bool animation;
	int statusbar, style, x, y;
	int color = HM_BASECOLOR;
	int height = getscreenheight();
	int id = HM_ID + 1;
	int width = getscreenwidth();
	str font = "", type = "A";

	if (getcvar("screenblocks") < 11)
		statusbar = height - scriptcall(HM_BRIDGE, "gettop");

	x = (fixeddiv(width << 16, 2.0) >> 16) << 16;
	y = (fixeddiv(height - statusbar << 16, 2.0) >> 16) << 16;

	int fade = getcvarplayer("hm_fade");

	if (fade < 0.1 || fade > 1.5)
		fade = 0.75;

	bool killpriority = getcvarplayer("hm_killpriority");

	int opacity = getcvarplayer("hm_opacity");

	if (opacity < 10 || opacity > 100)
		opacity = 100;

	opacity = fixeddiv(opacity << 16, 100.0);

	if (!force)
	{
		if (hitmarker == -1)
		{
			int killstyle = getcvarplayer("hm_killstyle");

			if (styletype(killstyle, 0))
				style = killstyle;
		}
		else
		{
			int hitstyle;

			if (hitmarker > 1)
				hitstyle = getcvarplayer("hm_dotstyle");
			else
				hitstyle = getcvarplayer("hm_hitstyle");

			if (styletype(hitstyle, 0))
				style = hitstyle;
		}

		switch (style)
		{
			case 1:
				animation = true;
				break;

			case 2:
				animation = true;
				break;

			case 3:
				font = "hitmarksmall";
				break;

			case 4:
				animation = true;
				break;

			case 5:
				animation = true;
				break;

			case 6:
				font = "hitmarkcircle";
				break;

			case 7:
				font = "hitmarkcirclesmall";
				break;

			case 8:
				font = "hitmarkvertical";
				break;

			case 9:
				font = "hitmarkverticalsmall";
				break;

			case 10:
				animation = true;
				break;

			case 11:
				animation = true;
				break;

			default:
				font = "hitmark";
		}
	}
	else
	{
		animation = true;

		if (hitmarker == -1)
		{
			if (styletype(animkillstyle, 2))
				type = animdefault[animkillstate];

			if (styletype(animkillstyle, 3))
				type = animimpact[animkillstate];

			style = animkillstyle;
		}
		else
		{
			if (styletype(animhitstyle, 2))
				type = animdefault[animhitstate];

			if (styletype(animhitstyle, 3))
				type = animimpact[animhitstate];

			style = animhitstyle;
		}
	}

	if (hitmarker == -1)
	{
		int killcolor = getcvarplayer("hm_killcolor");

		if (killcolor < 0 || killcolor > 18)
			killcolor = 0;
	}

	if (animation)
	{
		if (hitmarker == -1)
		{
			bool killspeed = getcvarplayer("hm_killspeed");

			switch (style)
			{
				case 1:
					if (!killcolor)
						font = "hitmarkanimatedkill";
					else
						font = "hitmarkanimated";
					break;

				case 2:
					if (!killcolor)
						font = "hitmarkanimatedkillreverse";
					else
						font = "hitmarkanimatedreverse";
					break;

				case 4:
					if (!killcolor)
						font = "hitmarkanimatedsmallkill";
					else
						font = "hitmarkanimatedsmall";
					break;

				case 5:
					if (!killcolor)
						font = "hitmarkanimatedsmallkillreverse";
					else
						font = "hitmarkanimatedsmallreverse";
					break;

				case 10:
					if (!killcolor)
						font = "hitmarkimpactkill";
					else
						font = "hitmarkimpact";
					break;

				case 11:
					if (!killcolor)
						font = "hitmarkimpactsmallkill";
					else
						font = "hitmarkimpactsmall";
			}

			if (!force)
			{
				if (killspeed && !styletype(style, 3))
					animkillspeed = 2;
				else
					animkillspeed = 1;

				animkillstate = 0;
				animkillstyle = style;
			}
		}
		else
		{
			bool hitspeed;

			if (hitmarker > 1)
				hitspeed = getcvarplayer("hm_dotspeed");
			else
				hitspeed = getcvarplayer("hm_hitspeed");

			switch (style)
			{
				case 1:
					font = "hitmarkanimated";
					break;

				case 2:
					font = "hitmarkanimatedreverse";
					break;

				case 4:
					font = "hitmarkanimatedsmall";
					break;

				case 5:
					font = "hitmarkanimatedsmallreverse";
					break;

				case 10:
					font = "hitmarkimpact";
					break;

				case 11:
					font = "hitmarkimpactsmall";
			}

			if (!force)
			{
				if (hitspeed && !styletype(style, 3))
					animhitspeed = 2;
				else
					animhitspeed = 1;

				animhitstate = 0;
				animhitstyle = style;

				if (!killpriority)
					animkillstate = -1;
			}
		}

		if (styletype(style, 2))
		{
			fade = getcvarplayer("hm_fadeanimated");

			if (fade < 0.1 || fade > 1.5)
				fade = 0.35;
		}
		else if (styletype(style, 3))
		{
			fade = 0;
		}
	}

	if (hitmarker == -1)
	{
		if (killcolor)
			color = getcolor(killcolor);
		else if (!animation)
			type = "B";

		if (killpriority)
		{
			if (animation)
				animhitstate = -1;

			hudmessage(d:0; HUDMSG_PLAIN, id, HM_BASECOLOR, 0, 0, 1873);
			id = HM_ID;
		}
		else 
		{
			animhitstate = -1;
		}
	}
	else
	{
		if (hitmarker > 1)
		{
			if (getcvarplayer("hm_dothit") == 2)
			{
				switch (hitmarker)
				{
					case 2: // Bleed
						color = CR_DARKRED;
						break;

					case 3: // Burn
						color = CR_ORANGE;
						break;

					case 4: // Corrosive
						color = CR_OLIVE;
						break;

					case 5: // Poison
						color = CR_GREEN;
				}
			}
		}

		if (color == HM_BASECOLOR)
		{
			int hitcolor = getcvarplayer("hm_hitcolor");

			if (hitcolor < 0 || hitcolor > 18)
				hitcolor = 0;

			if (hitcolor)
				color = getcolor(hitcolor);
		}
	}

	int size = getcvarplayer("hm_size");

	if (size == 1 || size == 2)
		font = strparam(s:font, d:size + 1);

	setfont(font);
	sethudsize(width, height, true);
	hudmessage(s:type; HM_FLAGS, id, color, x, y, HM_TIME, fade, opacity);
}

function bool setcvarplayer(str cvar, int value)
{
	return setusercvar(consoleplayer, cvar, value);
}

function str soundlimit(str sound)
{
	if (getcvarplayer("hm_soundlimit"))
	{
		if (sounddelay)
			sound = "";
		else
			sounddelay = HM_SOUNDLIMIT;
	}

	return sound;
}

function bool styletype(int style, int type)
{
	bool match;
	int total = 12;

	int styles[4][12] =
	{
		{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },			// 0 - All
		{ 0, 3, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1 },		// 1 - Not Animated
		{ 1, 2, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1 },		// 2 - Animated Default
		{ 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }	// 3 - Impact
	};

	for (int i = 0; i < total; i++)
	{
		if (styles[type][i] == style)
			match = true;

		if (match || styles[type][i] == -1)
			break;
	}

	return match;
}

/*-------\
   Core
\-------*/

function void hitmarkers(void)
{
	bool enabled = getcvarplayer("hm_enabled");
	bool hitmarkerkill = getcvarplayer("hm_bridge_kill");
	bool hitsounds = getcvarplayer("hm_hitsounds");
	bool killsounds = getcvarplayer("hm_killsounds");
	bool showhitmarkers = getcvarplayer("hm_showhitmarkers");
	bool showkillmarkers = getcvarplayer("hm_showkillmarkers");
	int type = getcvarplayer("hm_bridge_type");

	if (enabled && !(hitsounds || killsounds || showhitmarkers || showkillmarkers))
	{
		enabled = false;
		setcvarplayer("hm_enabled", 0);
	}

	if (enabled && type)
	{
		int channel, dothit, dotsounds;
		str sound = "";

		if (type > 1)
		{
			dothit = getcvarplayer("hm_dothit");
			dotsounds = getcvarplayer("hm_dotsounds");
		}

		if (hitsounds && (!hitmarkerkill || (hitmarkerkill && !killsounds)) && (type == 1 || (dotsounds && type > 1)))
		{
			int hitsound;

			if (type > 1)
				hitsound = getcvarplayer("hm_dotsound");

			if (!hitsound)
				hitsound = getcvarplayer("hm_hitsound");

			switch (hitsound)
			{
				case 1:
					sound = "blackops4hit";
					break;

				case 2:
					sound = "callofduty4hit";
					break;

				case 3:
					sound = "doomhit";
					break;

				case 4:
					sound = "overwatchhit";
					break;

				case 5:
					sound = hitdamage("quakehit");
					break;

				case 6:
					sound = "teamfortress2hit";
					break;

				case 7:
					sound = "modernwarfarehit";
					break;

				case 8:
					sound = "blackopscoldwarhit";
					break;

				default:
					sound = hitdamage("defaulthit");
			}

			channel = CHAN_VOICE;
			sound = soundlimit(sound);
		}

		if (hitmarkerkill)
		{
			if (killsounds)
			{
				int killsound = getcvarplayer("hm_killsound");

				switch (killsound)
				{
					case 1:
						sound = "blackops4kill";
						break;

					case 2:
						sound = "overwatchkill";
						break;

					case 3:
						sound = "quakechampionskill";
						break;

					case 4:
						sound = "teamfortress2kill";
						break;

					case 5:
						sound = "titanfall2kill";
						break;

					case 6:
						sound = "quakelivekill";
						break;

					case 7:
						sound = "modernwarfarekill";
						break;

					case 8:
						sound = "blackopscoldwarkill";
						break;

					default:
						sound = "defaultkill";
				}

				channel = CHAN_AUTO;
			}

			if (showkillmarkers)
			{
				renderhit(-1, false);
				showhitmarkers = false;
			}
		}

		if (showhitmarkers && (type == 1 || (dothit && type > 1)))
		{
			hitmarkertype = type;
			renderhit(type, false);
		}

		if (hitsounds || killsounds)
		{
			int volume = getcvarplayer("hm_volume");

			if (volume < 1 || volume > 100)
				volume = 100;

			if (dotsounds == 2)
				volume = volume / 2;
			else if (dotsounds == 3)
				volume = volume / 4;
			else if (dotsounds == 4)
				volume = volume / 10;

			volume = fixeddiv(volume << 16, 100.0);
			scriptcall(HM_BRIDGE, "playsound", sound, channel, CHAN_UI, volume, ATTN_NONE);
		}

		setcvarplayer("hm_bridge_damage", 0);
		setcvarplayer("hm_bridge_kill", 0);
		setcvarplayer("hm_bridge_type", 0);
	}
}

script "hitmarkers" (void)
{
	if (scriptcall(HM_BRIDGE, "getdeath"))
	{
		killswitch = true;
		terminate;
	}

	consoleplayer = scriptcall(HM_BRIDGE, "getconsoleplayer");
	animationhandler();
	decrementdelay();
	hitmarkers();
	delay(HM_REFRESH);
	restart;
}

script "hitmarkersenter" ENTER
{
	if (!strcmp("TITLEMAP", strparam(n:PRINTNAME_LEVEL)) || playernumber() != scriptcall(HM_BRIDGE, "getconsoleplayer") || scriptcall(HM_BRIDGE, "getnoautosavehint"))
		terminate;

	acs_namedexecutewithresult("hitmarkers");
}

script "hitmarkersrespawn" RESPAWN
{
	if (playernumber() != scriptcall(HM_BRIDGE, "getconsoleplayer") || scriptcall(HM_BRIDGE, "getnoautosavehint"))
		terminate;

	if (killswitch)
	{
		killswitch = false;
		setcvarplayer("hm_bridge_damage", 0);
		setcvarplayer("hm_bridge_kill", 0);
		setcvarplayer("hm_bridge_type", 0);
		acs_namedexecutewithresult("hitmarkers");
	}
}